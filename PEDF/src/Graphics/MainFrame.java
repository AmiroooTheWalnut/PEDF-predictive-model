/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Graphics;

import Data.AllData;
import Data.DataSet;
import Data.DataSetProcessor;
import Data.RawDataReader;
import MainModel.BaggingNet;
import MainModel.SimpleNet;
import com.esotericsoftware.kryo.Kryo;
import com.esotericsoftware.kryo.io.Input;
import com.esotericsoftware.kryo.io.Output;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import org.objenesis.strategy.StdInstantiatorStrategy;
import weka.classifiers.bayes.NaiveBayes;
import weka.core.Instances;
import weka.core.converters.ArffLoader;

/**
 *
 * @author Amir72c
 */
public class MainFrame extends javax.swing.JFrame {

    AllData allData;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        loadDataButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        saveModel = new javax.swing.JButton();
        loadModel = new javax.swing.JButton();
        saveModelKryo = new javax.swing.JButton();
        loadModelKryo = new javax.swing.JButton();
        saveDataButton = new javax.swing.JButton();
        saveDataKryo = new javax.swing.JButton();
        loadDataKryo = new javax.swing.JButton();
        saveData = new javax.swing.JButton();
        loadData = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        dataGeneratorButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        eventsIllustrate = new javax.swing.JButton();
        linksIllustrate = new javax.swing.JButton();
        netIllustrate = new javax.swing.JButton();
        scenariosIllustrate = new javax.swing.JButton();
        processSummaryButton = new javax.swing.JButton();
        samplingDebugButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        trainPercentSimpleNetSpinner = new javax.swing.JSpinner();
        isRandomTrainSimpleNetCheckBox = new javax.swing.JCheckBox();
        isFromBeginSimpleNetTrainCheckBox = new javax.swing.JCheckBox();
        trainSimpleNetButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        openSimpleModelButton = new javax.swing.JButton();
        testSimpleNetButton = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        isSortedByDateBaggingNetCheckBox = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        numFoldsSpinner = new javax.swing.JSpinner();
        trainBaggingNetButton = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        openBaggingNetButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        trainPercentBaggingNetSpinner = new javax.swing.JSpinner();
        testBaggingNetButton = new javax.swing.JButton();
        isRandomTrainBaggingNetCheckBox = new javax.swing.JCheckBox();
        isFromBeginBaggingNetTrainCheckBox = new javax.swing.JCheckBox();
        jButton2 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Load data"));

        loadDataButton.setText("Load dataset");
        loadDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadDataButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("No data selected");

        saveModel.setText("Save model serializable");
        saveModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveModelActionPerformed(evt);
            }
        });

        loadModel.setText("Load model serializable");
        loadModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadModelActionPerformed(evt);
            }
        });

        saveModelKryo.setText("Save model Kryo serializable");
        saveModelKryo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveModelKryoActionPerformed(evt);
            }
        });

        loadModelKryo.setText("Load model Kryo serializable");
        loadModelKryo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadModelKryoActionPerformed(evt);
            }
        });

        saveDataButton.setText("Show data");
        saveDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveDataButtonActionPerformed(evt);
            }
        });

        saveDataKryo.setText("Save data kryo serializable");
        saveDataKryo.setEnabled(false);

        loadDataKryo.setText("Load data kryo serializable");
        loadDataKryo.setEnabled(false);

        saveData.setText("Save data serializable");
        saveData.setEnabled(false);

        loadData.setText("Load data serializable");
        loadData.setEnabled(false);

        jButton1.setText("Show cases");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        dataGeneratorButton.setText("Data generator");
        dataGeneratorButton.setEnabled(false);

        jLabel4.setText("KRYO is broken. Can work with editted Weka.");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(loadDataButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveDataButton))
                    .addComponent(jButton1)
                    .addComponent(dataGeneratorButton)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(loadDataKryo)
                        .addGap(18, 18, 18)
                        .addComponent(loadData))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(saveDataKryo)
                        .addGap(18, 18, 18)
                        .addComponent(saveData))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(saveModelKryo)
                            .addComponent(loadModelKryo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(saveModel)
                            .addComponent(loadModel)))
                    .addComponent(jLabel4))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loadDataButton)
                    .addComponent(saveDataButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveModel)
                    .addComponent(saveModelKryo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loadModel)
                    .addComponent(loadModelKryo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveDataKryo)
                    .addComponent(saveData))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loadDataKryo)
                    .addComponent(loadData)
                    .addComponent(dataGeneratorButton))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Dataset Summary Debug"));

        eventsIllustrate.setText("Events");
        eventsIllustrate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventsIllustrateActionPerformed(evt);
            }
        });

        linksIllustrate.setText("Links");
        linksIllustrate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linksIllustrateActionPerformed(evt);
            }
        });

        netIllustrate.setText("Net");
        netIllustrate.setEnabled(false);
        netIllustrate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                netIllustrateActionPerformed(evt);
            }
        });

        scenariosIllustrate.setText("Scenarios");
        scenariosIllustrate.setEnabled(false);
        scenariosIllustrate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scenariosIllustrateActionPerformed(evt);
            }
        });

        processSummaryButton.setText("Process");
        processSummaryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processSummaryButtonActionPerformed(evt);
            }
        });

        samplingDebugButton.setText("Sampling debug");
        samplingDebugButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                samplingDebugButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(processSummaryButton)
                .addGap(18, 18, 18)
                .addComponent(eventsIllustrate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(linksIllustrate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(netIllustrate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scenariosIllustrate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(samplingDebugButton)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eventsIllustrate)
                    .addComponent(linksIllustrate)
                    .addComponent(netIllustrate)
                    .addComponent(scenariosIllustrate)
                    .addComponent(processSummaryButton)
                    .addComponent(samplingDebugButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Simple net"));

        jLabel2.setText("Train percent:");

        trainPercentSimpleNetSpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(20.0f), Float.valueOf(0.1f), Float.valueOf(100.0f), Float.valueOf(0.1f)));

        isRandomTrainSimpleNetCheckBox.setSelected(true);
        isRandomTrainSimpleNetCheckBox.setText("Randomly drawn?");
        isRandomTrainSimpleNetCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isRandomTrainSimpleNetCheckBoxActionPerformed(evt);
            }
        });

        isFromBeginSimpleNetTrainCheckBox.setText("From beginning?");
        isFromBeginSimpleNetTrainCheckBox.setEnabled(false);

        trainSimpleNetButton.setText("Train");
        trainSimpleNetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainSimpleNetButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("No model");

        openSimpleModelButton.setText("Open model");
        openSimpleModelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openSimpleModelButtonActionPerformed(evt);
            }
        });

        testSimpleNetButton.setText("Test");
        testSimpleNetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testSimpleNetButtonActionPerformed(evt);
            }
        });

        jButton3.setText("Simulator");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(isRandomTrainSimpleNetCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(isFromBeginSimpleNetTrainCheckBox)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(trainPercentSimpleNetSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(trainSimpleNetButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(openSimpleModelButton)
                        .addGap(18, 18, 18)
                        .addComponent(testSimpleNetButton))
                    .addComponent(jButton3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(trainPercentSimpleNetSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(isRandomTrainSimpleNetCheckBox)
                    .addComponent(isFromBeginSimpleNetTrainCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(testSimpleNetButton)
                    .addComponent(openSimpleModelButton)
                    .addComponent(trainSimpleNetButton)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Bagging net"));
        jPanel4.setEnabled(false);

        isSortedByDateBaggingNetCheckBox.setSelected(true);
        isSortedByDateBaggingNetCheckBox.setText("Sort by first event's date");
        isSortedByDateBaggingNetCheckBox.setEnabled(false);

        jLabel7.setText("Number of folds/nets:");
        jLabel7.setEnabled(false);

        numFoldsSpinner.setModel(new javax.swing.SpinnerNumberModel(5, 2, null, 1));
        numFoldsSpinner.setEnabled(false);

        trainBaggingNetButton.setText("Train");
        trainBaggingNetButton.setEnabled(false);
        trainBaggingNetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainBaggingNetButtonActionPerformed(evt);
            }
        });

        jLabel11.setText("No model");
        jLabel11.setEnabled(false);

        openBaggingNetButton.setText("Open model");
        openBaggingNetButton.setEnabled(false);
        openBaggingNetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openBaggingNetButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Train percent:");
        jLabel3.setEnabled(false);

        trainPercentBaggingNetSpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(70.0f), Float.valueOf(0.1f), Float.valueOf(100.0f), Float.valueOf(0.1f)));
        trainPercentBaggingNetSpinner.setEnabled(false);

        testBaggingNetButton.setText("Test");
        testBaggingNetButton.setEnabled(false);
        testBaggingNetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testBaggingNetButtonActionPerformed(evt);
            }
        });

        isRandomTrainBaggingNetCheckBox.setText("Randomly drawn?");
        isRandomTrainBaggingNetCheckBox.setEnabled(false);
        isRandomTrainBaggingNetCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isRandomTrainBaggingNetCheckBoxActionPerformed(evt);
            }
        });

        isFromBeginBaggingNetTrainCheckBox.setSelected(true);
        isFromBeginBaggingNetTrainCheckBox.setText("From beginning?");
        isFromBeginBaggingNetTrainCheckBox.setEnabled(false);
        isFromBeginBaggingNetTrainCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isFromBeginBaggingNetTrainCheckBoxActionPerformed(evt);
            }
        });

        jButton2.setText("Simulator");
        jButton2.setEnabled(false);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(isRandomTrainBaggingNetCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(isSortedByDateBaggingNetCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(isFromBeginBaggingNetTrainCheckBox)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(trainPercentBaggingNetSpinner))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(numFoldsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(trainBaggingNetButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(openBaggingNetButton)
                                .addGap(18, 18, 18)
                                .addComponent(testBaggingNetButton))
                            .addComponent(jButton2))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(isSortedByDateBaggingNetCheckBox)
                    .addComponent(jLabel3)
                    .addComponent(trainPercentBaggingNetSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(isRandomTrainBaggingNetCheckBox)
                    .addComponent(isFromBeginBaggingNetTrainCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(numFoldsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(trainBaggingNetButton)
                    .addComponent(jLabel11)
                    .addComponent(openBaggingNetButton)
                    .addComponent(testBaggingNetButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addContainerGap())
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Simulation"));
        jPanel5.setEnabled(false);

        jButton4.setText("Open simulator");
        jButton4.setEnabled(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel5.setText("Version 1.0.0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveModelKryoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveModelKryoActionPerformed
        // TODO add your handling code here:
        JFileChooser fc_save = new JFileChooser();
        fc_save.setAcceptAllFileFilterUsed(false);
        int returnVal = fc_save.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String file_name = fc_save.getSelectedFile().getName();
            String save_file_path = fc_save.getSelectedFile().getAbsolutePath();
            try {
                saveSimpleNetKryo(save_file_path, allData.simpleNet);
            } catch (Exception ex) {
            }
        }
    }//GEN-LAST:event_saveModelKryoActionPerformed

    private void loadDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadDataButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser jFileChooser1 = new javax.swing.JFileChooser();
        jFileChooser1.setAcceptAllFileFilterUsed(false);
        File currentFolder;
        try {
            currentFolder = new File(new File(".").getCanonicalPath());
            jFileChooser1.setCurrentDirectory(currentFolder);
            int returnVal = jFileChooser1.showOpenDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                if (allData == null) {
                    allData = new AllData();
                }
                allData.rawDataSet = new RawDataReader().readRawData(jFileChooser1.getSelectedFile().getAbsolutePath());
                int caseIndex = 0;
                int eventIndex = 0;
                int timeIndex = 0;
                for (int i = 0; i < allData.rawDataSet.headers.length; i++) {
                    if (allData.rawDataSet.headers[i].equals("case")) {
                        caseIndex = i;
                    }
                    if (allData.rawDataSet.headers[i].equals("event")) {
                        eventIndex = i;
                    }
                    if (allData.rawDataSet.headers[i].equals("time")) {
                        timeIndex = i;
                    }
                }
                allData.dataSet = DataSetProcessor.generateDataSet(caseIndex, eventIndex, timeIndex, allData.rawDataSet);
                jLabel1.setText("Data loaded");
            }
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_loadDataButtonActionPerformed

    private void eventsIllustrateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventsIllustrateActionPerformed
        // TODO add your handling code here:
        EventDialog eventDialog = new EventDialog(this, true);
        eventDialog.setVisible(true);
    }//GEN-LAST:event_eventsIllustrateActionPerformed

    private void saveDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveDataButtonActionPerformed
        // TODO add your handling code here:
        DataDialog dataDialog = new DataDialog(this, true);
        dataDialog.setVisible(true);
    }//GEN-LAST:event_saveDataButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        CaseDialog caseDialog = new CaseDialog(this, allData.dataSet, true);
        caseDialog.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void linksIllustrateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linksIllustrateActionPerformed
        // TODO add your handling code here:
        LinkDialog linkDialog = new LinkDialog(this, true);
        linkDialog.setVisible(true);
    }//GEN-LAST:event_linksIllustrateActionPerformed

    private void processSummaryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processSummaryButtonActionPerformed
        // TODO add your handling code here:
        allData.simpleNetSummary = new SimpleNet();
        allData.simpleNetSummary.generateNet(allData.dataSet);
    }//GEN-LAST:event_processSummaryButtonActionPerformed

    private void trainSimpleNetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainSimpleNetButtonActionPerformed
        // TODO add your handling code here:
        NetTrainDialog netTrainDialog = new NetTrainDialog(this, true);
        netTrainDialog.setVisible(true);
//        allData.simpleNet = new SimpleNet();
//        DataSet sampledDataSet;
//        if (isRandomTrainSimpleNetCheckBox.isSelected()) {
//            sampledDataSet = allData.dataSet.randomSample((float) trainPercentSimpleNetSpinner.getValue());
//            allData.simpleNet.trainNet(sampledDataSet);
//        } else {
//            sampledDataSet = allData.dataSet.linearSample((float) trainPercentSimpleNetSpinner.getValue(), !isFromBeginSimpleNetTrainCheckBox.isSelected());
//            allData.simpleNet.trainNet(sampledDataSet);
//        }
        jLabel6.setText("Model created");
    }//GEN-LAST:event_trainSimpleNetButtonActionPerformed

    private void samplingDebugButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_samplingDebugButtonActionPerformed
        // TODO add your handling code here:
        SamplingDebugDialog samplingDebugDialog = new SamplingDebugDialog(this, allData.dataSet, allData.rawDataSet, true);
        samplingDebugDialog.setVisible(true);
    }//GEN-LAST:event_samplingDebugButtonActionPerformed

    private void netIllustrateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_netIllustrateActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_netIllustrateActionPerformed

    private void isRandomTrainSimpleNetCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isRandomTrainSimpleNetCheckBoxActionPerformed
        // TODO add your handling code here:
        if (!isRandomTrainSimpleNetCheckBox.isSelected()) {
            isFromBeginSimpleNetTrainCheckBox.setEnabled(true);
        } else {
            isFromBeginSimpleNetTrainCheckBox.setEnabled(false);
        }
    }//GEN-LAST:event_isRandomTrainSimpleNetCheckBoxActionPerformed

    private void testSimpleNetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testSimpleNetButtonActionPerformed
        // TODO add your handling code here:
        TestSimpleNetDialog tsnd = new TestSimpleNetDialog(this, true);
        tsnd.setVisible(true);
    }//GEN-LAST:event_testSimpleNetButtonActionPerformed

    private void openSimpleModelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openSimpleModelButtonActionPerformed
        // TODO add your handling code here:
        SimpleNetModelViewerDialog smvd = new SimpleNetModelViewerDialog(this, true);
        smvd.setVisible(true);
    }//GEN-LAST:event_openSimpleModelButtonActionPerformed

    private void trainBaggingNetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainBaggingNetButtonActionPerformed
        // TODO add your handling code here:
        allData.baggingNet = new BaggingNet();
        DataSet sampledDataSet[];
        if (isRandomTrainBaggingNetCheckBox.isSelected()) {
            sampledDataSet = allData.dataSet.randomSubSamples((float) trainPercentBaggingNetSpinner.getValue(), (int) numFoldsSpinner.getValue());
            allData.baggingNet.trainNet(sampledDataSet);
        } else {
            sampledDataSet = allData.dataSet.linearSubSamples((float) trainPercentBaggingNetSpinner.getValue(), (int) numFoldsSpinner.getValue(), !isFromBeginBaggingNetTrainCheckBox.isSelected(), isSortedByDateBaggingNetCheckBox.isSelected());
            allData.baggingNet.trainNet(sampledDataSet);
        }
        jLabel11.setText("Model created");
    }//GEN-LAST:event_trainBaggingNetButtonActionPerformed

    private void loadModelKryoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadModelKryoActionPerformed
        // TODO add your handling code here:
        JFileChooser jFileChooser1 = new javax.swing.JFileChooser();
        jFileChooser1.setAcceptAllFileFilterUsed(false);
        int returnVal = jFileChooser1.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            final String loaded_file_path = jFileChooser1.getCurrentDirectory().getPath();
            String file_name = jFileChooser1.getSelectedFile().getName();
            if (file_name.lastIndexOf(".") != -1) {
                file_name = file_name.substring(0, file_name.lastIndexOf("."));
            }

            final String passed_file_name = file_name;
            Thread readThread = new Thread(new Runnable() {
                @Override
                public void run() {
                    //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                    if (allData == null) {
                        allData = new AllData();
                    }
                    allData.simpleNet = loadSimpleNetKryo(allData.simpleNet, loaded_file_path, passed_file_name, "kspn");
                }
            });
            readThread.start();
            try {
                readThread.join();
//                setDataLists();
            } catch (InterruptedException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        System.out.println();
    }//GEN-LAST:event_loadModelKryoActionPerformed

    private void saveModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveModelActionPerformed
        // TODO add your handling code here:
        JFileChooser fc_save = new JFileChooser();
        fc_save.setAcceptAllFileFilterUsed(false);
        int returnVal = fc_save.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String file_name = fc_save.getSelectedFile().getName();
            String save_file_path = fc_save.getSelectedFile().getAbsolutePath();
            try {
                saveSimpleNetserializable(save_file_path, allData.simpleNet);
            } catch (Exception ex) {
            }
        }
    }//GEN-LAST:event_saveModelActionPerformed

    private void loadModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadModelActionPerformed
        // TODO add your handling code here:
        JFileChooser jFileChooser1 = new javax.swing.JFileChooser();
        jFileChooser1.setAcceptAllFileFilterUsed(false);
        int returnVal = jFileChooser1.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String loaded_file_path = jFileChooser1.getCurrentDirectory().getPath();
            String file_name = jFileChooser1.getSelectedFile().getName();
            if (file_name.lastIndexOf(".") != -1) {
                file_name = file_name.substring(0, file_name.lastIndexOf("."));
            }
            if (allData == null) {
                allData = new AllData();
            }
            allData.simpleNet = loadSimpleModelSerializable(allData.simpleNet, loaded_file_path, file_name, "sspn");
        }
    }//GEN-LAST:event_loadModelActionPerformed

    private void scenariosIllustrateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scenariosIllustrateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_scenariosIllustrateActionPerformed

    private void isFromBeginBaggingNetTrainCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isFromBeginBaggingNetTrainCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_isFromBeginBaggingNetTrainCheckBoxActionPerformed

    private void openBaggingNetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openBaggingNetButtonActionPerformed
        // TODO add your handling code here:
        BaggingNetModelViewerDialog bmvd = new BaggingNetModelViewerDialog(this, true);
        bmvd.setVisible(true);
    }//GEN-LAST:event_openBaggingNetButtonActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_jButton3ActionPerformed

    private void testBaggingNetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testBaggingNetButtonActionPerformed
        // TODO add your handling code here:
        TestBaggingNetDialog tbnd = new TestBaggingNetDialog(this, true);
        tbnd.setVisible(true);
    }//GEN-LAST:event_testBaggingNetButtonActionPerformed

    private void isRandomTrainBaggingNetCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isRandomTrainBaggingNetCheckBoxActionPerformed
        // TODO add your handling code here:
        if (!isRandomTrainBaggingNetCheckBox.isSelected()) {
            isFromBeginBaggingNetTrainCheckBox.setEnabled(true);
        } else {
            isFromBeginBaggingNetTrainCheckBox.setEnabled(false);
        }
    }//GEN-LAST:event_isRandomTrainBaggingNetCheckBoxActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private SimpleNet loadSimpleModelSerializable(SimpleNet sn, String file_path, String file_name, String data_type) {
        FileInputStream f_in;
        try {
            f_in = new FileInputStream(file_path + "\\" + file_name + "." + data_type);
            // Read object using ObjectInputStream
            ObjectInputStream obj_in;
            try {
                obj_in = new ObjectInputStream(f_in);
                try {
                    Object obj = obj_in.readObject();
                    if (obj instanceof SimpleNet) {
                        sn = (SimpleNet) obj;
                    }

                    return sn;
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }

            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

    private void saveSimpleNetserializable(String passed_file_path, SimpleNet sn) {
        String file_path = passed_file_path;
        FileOutputStream f_out;
        try {
            f_out = new FileOutputStream(file_path + ".sspn");
            ObjectOutputStream obj_out;
            try {
                obj_out = new ObjectOutputStream(f_out);
                obj_out.writeObject(sn);
                obj_out.close();
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private SimpleNet loadSimpleNetKryo(SimpleNet sn, String file_path, String file_name, String data_type) {
        Kryo kryo = new Kryo();
        kryo.setInstantiatorStrategy(new Kryo.DefaultInstantiatorStrategy(new StdInstantiatorStrategy()));
        Input input;
        try {
            input = new Input(new FileInputStream(file_path + "\\" + file_name + "." + data_type));
            sn = kryo.readObject(input, SimpleNet.class);
            input.close();
//            for (int i = 0; i < sn.events.size(); i++) {
//                if (sn.events.get(i).classifier != null) {
//                    ArffLoader al = new ArffLoader();
//                    al.setSource(new ByteArrayInputStream(sn.events.get(i).arffInternalHeader.getBytes()));
//                    Instances tempInstances = al.getDataSet();
//                    tempInstances.setClass(tempInstances.attribute("Output"));
//                    ((NaiveBayes) sn.events.get(i).classifier).m_Instances = tempInstances;//MANUAL WEKA BUILD FAILED
//                }
//            }
            return sn;
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

    private void saveSimpleNetKryo(String path, SimpleNet sn) {
        Kryo kryo = new Kryo();
        kryo.setInstantiatorStrategy(new Kryo.DefaultInstantiatorStrategy(new StdInstantiatorStrategy()));
        Output output;
        try {
            output = new Output(new FileOutputStream(path + ".kspn"));
            kryo.writeObject(output, sn);
            output.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton dataGeneratorButton;
    private javax.swing.JButton eventsIllustrate;
    private javax.swing.JCheckBox isFromBeginBaggingNetTrainCheckBox;
    public javax.swing.JCheckBox isFromBeginSimpleNetTrainCheckBox;
    private javax.swing.JCheckBox isRandomTrainBaggingNetCheckBox;
    public javax.swing.JCheckBox isRandomTrainSimpleNetCheckBox;
    private javax.swing.JCheckBox isSortedByDateBaggingNetCheckBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JButton linksIllustrate;
    private javax.swing.JButton loadData;
    private javax.swing.JButton loadDataButton;
    private javax.swing.JButton loadDataKryo;
    private javax.swing.JButton loadModel;
    private javax.swing.JButton loadModelKryo;
    private javax.swing.JButton netIllustrate;
    private javax.swing.JSpinner numFoldsSpinner;
    private javax.swing.JButton openBaggingNetButton;
    private javax.swing.JButton openSimpleModelButton;
    private javax.swing.JButton processSummaryButton;
    private javax.swing.JButton samplingDebugButton;
    private javax.swing.JButton saveData;
    private javax.swing.JButton saveDataButton;
    private javax.swing.JButton saveDataKryo;
    private javax.swing.JButton saveModel;
    private javax.swing.JButton saveModelKryo;
    private javax.swing.JButton scenariosIllustrate;
    private javax.swing.JButton testBaggingNetButton;
    private javax.swing.JButton testSimpleNetButton;
    private javax.swing.JButton trainBaggingNetButton;
    private javax.swing.JSpinner trainPercentBaggingNetSpinner;
    public javax.swing.JSpinner trainPercentSimpleNetSpinner;
    private javax.swing.JButton trainSimpleNetButton;
    // End of variables declaration//GEN-END:variables
}
